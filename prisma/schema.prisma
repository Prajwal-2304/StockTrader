// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id                          Int               @id @default(autoincrement())
  pan                         String            @unique
  bankacc                     String            @unique
  name                        String
  email                       String            @unique
  password                    String
  salt                        String
  phone                       String
  tpin                        String
  balance                     Float            
  nominees                    Nominee[]
  watchlists                  Watchlist[]
  portfolio                   Portfolio[]
  orders                      Order[]
}

model Nominee{
  id                          Int               @id @default(autoincrement())
  name                        String 
  relation                    String            
  email                       String 
  pan                         String            
  percentage                  Float
  userId                      Int 
  user                        Users             @relation(fields: [userId],references: [id],onDelete:Cascade)
}

model Watchlist{
  id                          Int               @id @default(autoincrement())
  name                        String
  userId                      Int
  user                        Users             @relation(fields: [userId],references: [id],onDelete: Cascade)
  stocks                      WatchlistStock[]
}
model Stock{
  id                          Int               @unique @default(autoincrement())
  ticker                      String            @id
  name                        String            
  supply                      Float
  chain                       String
  watchlists                  WatchlistStock[] 
  portfolios                  PortfolioStock[]
  orders                      Order[]
}
model WatchlistStock{
  id                          Int               @id @default(autoincrement())
  watchlistid                 Int 
  stockTicker                 String 
  watchlist                   Watchlist         @relation(fields: [watchlistid],references: [id],onDelete: Cascade)
  stocks                      Stock             @relation(fields: [stockTicker],references: [ticker])
}

model Portfolio{
  id                          Int               @id @default(autoincrement())
  userid                      Int 
  user                        Users             @relation(fields: [userid],references: [id],onDelete: Cascade)
  stocks                      PortfolioStock[]
  investedAmount              Float             @default(0)
} 

model PortfolioStock{
  id                          Int               @id @default(autoincrement())
  portfolioid                 Int
  stockticker                 String 
  quantity                    Float 
  investedAmt                 Float
  buyprice                    Float 
  portfolio                   Portfolio         @relation(fields: [portfolioid],references: [id])
  stock                       Stock             @relation(fields: [stockticker],references: [ticker])                

}

enum OrderType{
  Buy 
  Sell
}

model Order{
  id                          Int               @id @default(autoincrement())
  portfolioId                 Int
  userId                      Int               
  stockticker                 String 
  type                        OrderType
  quantity                    Float 
  date                        DateTime
  price                       Float 
  user                        Users             @relation(fields: [userId],references: [id])
  stock                       Stock             @relation(fields: [stockticker],references: [ticker])
}

